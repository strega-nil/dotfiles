[user]
name = "Nicole Patricia Mazzuca"
email = "nicole@strega-nil.co"

[git]
sign-on-push = true
fetch = "origin"
push = "origin"

[ui]
show-cryptographic-signatures = true
default-command = "status"

[signing]
behavior = "drop"
backend = "gpg"
key = "861E11A9B3E5C2ED"

[colors]
'description title' = { bold = true }
"bookmarks" = { fg = 'red', bold = true }

[templates]
log = "strega_log_comfortable"
draft_commit_description = "commit_description_verbose"

[[--scope]]
--when.commands = ["diff", "show"]
[--scope.ui]
pager = "delta"
diff.format = "git"

[revsets]
log = "::@"
[revset-aliases]
all = "@ | ancestors(trunk()..(visible_heads() & mine())) | trunk()"
HEAD = "coalesce(@ ~ description(exact:''), @-)"

[aliases]
rebase-trunk = ["rebase", "-d", "trunk()"]
logb = ["log", "-r", "trunk()::@"]
tree = ["log", "-r", "@ | ancestors((visible_heads() ~ untracked_remote_bookmarks()) & mine())"]
# it would be nice if we had better aliases -.-
update = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj bookmark move --from "latest(::@ & bookmarks())" --to HEAD
else
  jj bookmark move --to HEAD "$@"
fi
""", ""]
push = ["util", "exec", "--", "sh", "-c", '''
if [ "x$1" = "x" ]; then
  export bookmark_names=`jj log --no-graph -r "latest((@ | @-) & bookmarks())" -T "bookmarks.map(|b| b.name()).join(' ')"`
else
  export bookmark_names="$1"
fi

for bookmark in $bookmark_names; do
  export remotes=`jj bookmark list $bookmark --tracked -T 'if(self.remote().len() != 0, self.remote() ++ "\n")'`
  if [ "x$remotes" = "x" ]; then
    echo >&2 "bookmark $bookmark doesn't have any remotes"
    continue
  fi
  echo >&2 "pushing $bookmark to" $remotes
  for remote in $remotes; do
    jj git push -b $bookmark --remote $remote
  done
done
''', ""]
track = ["util", "exec", "--", "sh", "-c", '''
if [ "x$1" = "x" ]; then
  echo >&2 "first argument is necessary"
fi

if [ "x$2" = "x" ]; then
  export bookmark_names=`jj log --no-graph -r "latest((@ | @-) & bookmarks())" -T "bookmarks.join(' ')"`
else
  export bookmark_names="$2"
fi

for bookmark in $bookmark_names; do
  jj git push -b $bookmark --remote $1 --allow-new
done
''', ""]
show-commit = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj log --no-graph -r HEAD -T commit_id
else
  jj log --no-graph -T commit_id -r "$@"
fi
""", ""]
copy-commit = ["util", "exec", "--", "sh", "-c", """
jj show-commit "$@" | pbcopy
""", ""]
format-patch = ["util", "exec", "--", "sh", "-c", """
if [ "x$1" = "x" ]; then
  jj log --no-graph -r HEAD -T 'format_patch(self)'
else
  jj log --no-graph -T 'format_patch(self)' -r "$@"
fi
""", ""]

[template-aliases]
'format_short_change_id(id)' = 'label("change_id", stringify(id.shortest(8)))'
'format_short_commit_id(id)' = 'label("commit_id", stringify(id.shortest(8)))'

'strega_format_short_commit_header(commit)' = '''
separate(" ",
  format_short_change_id_with_hidden_and_divergent_info(commit),
  if(description,
    label("description title", description.first_line()),
    label(if(empty, "empty"), description_placeholder),
  ),
  if(empty, label("empty", "(empty)")),
  format_short_commit_id(commit.commit_id()),
  if(commit.conflict(), label("conflict", "conflict")),
)
'''
'strega_format_short_commit_meta(commit)' = '''
separate(" ",
  commit.bookmarks(),
  commit.tags(),
  format_short_signature(commit.author()),
  format_timestamp(commit_timestamp(commit)),
  commit.working_copies(),
  if(commit.git_head(), label("git_head", "git_head()")),
  if(config("ui.show-cryptographic-signatures").as_boolean(),
    format_short_cryptographic_signature(commit.signature())),
)
'''

strega_log_compact = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      strega_format_short_commit_header(self),
      "\n  ",
      strega_format_short_commit_meta(self),
      "\n",
    ),
  )
)
'''
strega_log_comfortable = "strega_log_compact ++ '\n'"

'git_format_patch_header(change)' = '''
separate("\n",
  concat("From ", change.commit_id(), " Mon Sep 17 00:00:00 2001"),
  concat("From: ", change.committer()),
  concat("Date: ", commit_timestamp(change).format("%a, %-d %b %Y %T %z")),
  concat("Subject: [PATCH] ", change.description()))
'''
'format_patch(change)' = '''
separate("\n",
  git_format_patch_header(change),
  "---",
  change.diff().stat(),
  "",
  change.diff().git(),
  "--",
  "jj 0.27.0")
'''

commit_description_verbose = '''
concat(
  description,
  "\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''
